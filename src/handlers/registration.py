import tool
from config import logger
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, CommandStart
from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from keyboards.register import get_reg_bt, get_lang_bt, get_checkin_kb, get_code_kb, get_service_kb
from filters.chat_type import ChatTypeFilter
from .handler_tool import preset_data, send_code_verification
import random


router = Router()
router.message.filter(ChatTypeFilter(chat_type=["group", "supergroup"]))


class UserStates(StatesGroup):
    """
    Personal data
    """
    fullname = State()
    phone = State()
    email = State()
    user_language = State()
    manager = State()
    code = State()


@router.message(Command("register"))
async def register_person(message: Message, db):
    user = await tool.exist_user(str(message.from_user.id), db)
    if not user:
        logger.warning("New user to want registration")
        await message.answer(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ –í–∞—Å –ø—Ä–∏–≤–µ—Å—Ç–≤—É–µ—Ç —Å–º–∞—Ä—Ç-–±–æ—Ç '–ö–∞–∑–ú—É–Ω–∞–π–ì–∞–∑'"
                             f"–¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É\n", reply_markup=get_reg_bt())
        return True
    await message.answer(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ üêè <u>{user[0]}</u>, \n–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!\n"
                         f"–õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n"
                         f"–ü–æ—á—Ç–∞ ‚úâ - {user[1]}\n"
                         f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ‚òé - {user[2]}\n"
                         f"–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å üêº - {user[3]}", reply_markup=get_service_kb())


@router.callback_query(F.data == "reg")
async def checkin_confirm(callback: CallbackQuery, state: FSMContext, bot) -> None:
    # registration
    await bot.edit_message_reply_markup(
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id,
        reply_markup=None)

    await callback.answer("–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É–∫–∞–∂–∏—Ç–µ üìù:\n\n–§–ò–û üêè\n–ö–æ—Ä–ø–∞—Ä–∞—Ç–∏–≤–Ω—É—é –ø–æ—á—Ç—É ‚úâ\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ‚òé\n–ù–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è üêº\n–Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ üåè", show_alert=True)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –§–ò–û üêè:", reply_markup=None)
    await state.set_state(UserStates.fullname)


@router.callback_query(F.data == "cancel")
async def canceled(callback: CallbackQuery, bot) -> None:
    # cancel
    await bot.edit_message_reply_markup(
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id,
        reply_markup=None)

    await callback.answer()
    await callback.message.answer("üó≥ –ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–æ–Ω–æ–≤–µ–Ω–∏ –≤–æ–ø—Ä–æ—Å–æ–≤, –ø—Ä–æ—Å–∏–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è –ø–æ –Ω–∏–∂–µ—É–∫–∞–∑–∞–Ω–Ω—ã–º –∫–æ–Ω—Ç–∞–∫—Ç–∞–º:\n"
                         "<em>T–µ–ª–µ—Ñ–æ–Ω ‚òé:</em> <b>1414</b>\n"
                         "<em>–ü–æ—á—Ç–∞ ‚úâ:</em> <b>manager@kmg.kz</b>")


@router.message(UserStates.fullname)
async def process_name(message: Message, state: FSMContext) -> None:
    """
    User's full name
    """
    await state.update_data(fullname=message.text)
    await state.set_state(UserStates.email)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –í–∞—à—É –∫–æ—Ä–ø–∞—Ä–∞—Ç–∏–≤–Ω—É—é –ø–æ—á—Ç—É ‚úâ:")


@router.message(UserStates.email)
async def process_email(message: Message, state: FSMContext) -> None:
    """
    Email validation
    """
    if not message.entities or message.entities[0].type != "email":
        await message.answer("–ù–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ—á—Ç—ã üö´")
        return
    elif message.text.rsplit("@")[1].rfind("kmg") == -1:
        await message.answer("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—É—é –ø–æ—á—Ç—É ‚úâ")
        return
    await state.update_data(email=message.text)
    await state.set_state(UserStates.phone)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ‚òé (–¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):")


@router.message(UserStates.phone)
async def process_manager(message: Message, state: FSMContext) -> None:
    """
    User's phone
    """
    if not message.text.isdigit():
        await message.answer("–ù–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üö´")
        return
    await state.update_data(phone=message.text)
    await state.set_state(UserStates.manager)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –§–ò–û –í–∞—à–µ–≥–æ —Ä—É–∫–∞–≤–æ–¥–∏—Ç–µ–ª—è üêº:")


@router.message(UserStates.manager)
async def process_manager(message: Message, state: FSMContext) -> None:
    """
    User's manager
    """
    await state.update_data(manager=message.text)
    await state.set_state(UserStates.user_language)
    await message.answer("–í—ã–±–∏—Ä–µ—Ç–µ —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ üåè:", reply_markup=get_lang_bt())


@router.callback_query(F.data.startswith("lang_"), UserStates.user_language)
async def checkin_lang(callback: CallbackQuery, state: FSMContext, bot) -> None:
    """
    Parse selected lang
    """
    await bot.edit_message_reply_markup(
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id,
        reply_markup=None)
    lang_msg = callback.data.split("_")[2]
    lang_code = callback.data.split("_")[1]
    await callback.answer()
    await callback.message.answer(f"–Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ {lang_msg}")
    await state.update_data(user_language=lang_code)

    data = await state.get_data()
    personal_data = await preset_data(data=data)
    await callback.message.answer(text=personal_data, reply_markup=get_checkin_kb())


@router.callback_query(F.data.startswith("check_"), UserStates.user_language)
async def verification_user(callback: CallbackQuery, state: FSMContext, bot) -> None:
    """
    Confirming
    """
    code = random.randrange(1000, 10000)
    await state.update_data(code=str(code))
    data = await state.get_data()
    confirm = callback.data.split("_")[1]
    await callback.answer()
    if confirm == "confirm":
        await send_code_verification(data["email"], code)
        await callback.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ üîë, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –Ω–∞ –ø–æ—á—Ç—É ‚úâ <i>{data['email']}</i>")
        await state.set_state(UserStates.code)
    else:
        await callback.message.answer("* <i>–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–Ω–æ–≤–æ üìù</i> *")
        await checkin_confirm(callback, state, bot)


@router.message(UserStates.code)
async def verification_code_user(message: Message, state: FSMContext, db) -> None:
    """
    Register user
    """
    data = await state.get_data()
    if data['code'] == message.text:
        await tool.add_user(data=data, user_uid=message.from_user.id, db=db)
        await state.clear()
        logger.warning(f"User by email {data['email']} was registered")
        await message.answer("–ü–æ–∑–¥—Ä–∞–≤–ª–µ—è–º –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å! üü¢", reply_markup=get_service_kb())
    else:
        logger.warning(f"User by email {data['email']} enter incorrect verify code")
        await message.answer("–ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π üö´, —É–±–µ–¥–∏—Ç–µ—Å—å –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –∫–æ–¥–∞ –∏ –≤–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑!",
                             reply_markup=get_code_kb())


@router.callback_query(F.data.startswith("reset"), UserStates.code)
async def canceled(callback: CallbackQuery, state: FSMContext, bot) -> None:
    """
    Restart registration
    """
    await callback.answer()
    await state.clear()
    await callback.message.answer("* <i>–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–Ω–æ–≤–æ üìù</i> *")
    await checkin_confirm(callback, state, bot)


@router.message(Command("cancel"))
async def canceled_command(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(f"–°–±—Ä–æ—Å")
