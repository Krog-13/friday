from aiogram.types import Message, FSInputFile, CallbackQuery
from aiogram.filters import CommandStart, Command
from aiogram import Router, F
from filters.chat_type import ChatTypeFilter
from aiogram.fsm.context import FSMContext
import tool
from tool import PersonState
import random
from .handler_tool import send_code_verification
from .registration import checkin_confirm
from config import BASE_DIR, logger
from keyboards.register import get_reg_bt, get_service_kb, get_update_kb, get_update_profile_kb

router = Router()
router.message.filter(ChatTypeFilter(chat_type=["group", "supergroup"]))
_KMG_LOGO = FSInputFile(BASE_DIR + "/media/logo_kmg.jpg")



@router.message(CommandStart())
async def cmd_dice_in_group(message: Message, db):
    user = await tool.exist_user(str(message.from_user.id), db)

    if not user:
        logger.warning("New user to want registration")
        await message.answer_photo(_KMG_LOGO, caption="–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –°–º–∞—Ä—Ç-–±–æ—Ç üêπ'–ö–∞–∑–ú—É–Ω–∞–π–ì–∞–∑'\n"
                                                      "–¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ "
                                                      "<b>–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è</b> üîµ", reply_markup=get_reg_bt())
        return True

    await message.answer_photo(photo=_KMG_LOGO,
                               caption=f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ üêè <u>{user[0]}</u> \n–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –°–º–∞—Ä—Ç-–±–æ—Ç '–ö–∑–∞–ú—É–Ω–∞–π–ì–∞–∑'üêπ\n"
                                       f"–õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n"
                                       f"‚ñ´ –ü–æ—á—Ç–∞: ‚úâ - {user[1]}\n"
                                       f"‚ñ´ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ‚òé - {user[2]}\n"
                                       f"‚ñ´ –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å: üêº - {user[3]}", reply_markup=get_service_kb())


@router.message(Command("help"))
async def helper(message: Message):
    await message.answer(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ –í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –°–º–∞—Ä—Ç-–±–æ—Ç üêπ'–ö–∞–∑–ú—É–Ω–∞–π–ì–∞–∑'\n"
                         f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–º–∞–Ω–¥—ã: üìé\n"
                         f"‚ñ´ –ù–∞—á–∞–ª–æ /start\n"
                         f"‚ñ´ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è /register\n"
                         f"‚ñ´ –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å /service\n"
                         f"‚ñ´ –°–±—Ä–æ—Å /cancel")


@router.message(Command("cancel"))
async def canceled_command(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(f"–°–±—Ä–æ—Å")


@router.message(F.text.startswith("–ü—Ä–æ—Ñ–∏–ª—å"))
async def canceled_command(message: Message, db):
    user = await tool.exist_user(str(message.from_user.id), db)
    if not user:
        logger.warning("New user to want registration")
        await message.answer_photo(_KMG_LOGO, caption="–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –°–º–∞—Ä—Ç-–±–æ—Ç üêπ'–ö–∞–∑–ú—É–Ω–∞–π–ì–∞–∑'\n"
                                                      "–¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ "
                                                      "<b>–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è</b> üîµ", reply_markup=get_reg_bt())
        return
    await message.answer(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ üêë <u>{user[0]}</u>, \n–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å üìî\n\n"
                         f"–ü–æ—á—Ç–∞: ‚úâ - {user[1]}\n"
                         f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ‚òé - {user[2]}\n"
                         f"–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å: üêº - {user[3]}", reply_markup=get_update_kb())


@router.message(F.text.startswith("–û–±—Ä–∞—Ç–Ω–∞—è"))
async def canceled_command(message: Message):
    await message.answer("üó≥ –ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏ –≤–æ–ø—Ä–æ—Å–æ–≤, –ø—Ä–æ—Å–∏–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è –ø–æ –Ω–∏–∂–µ—É–∫–∞–∑–∞–Ω–Ω—ã–º –∫–æ–Ω—Ç–∞–∫—Ç–∞–º:\n"
                         "<em>—Å –≥–æ—Ä–æ–¥—Å–∫–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞</em>: ‚òé - <b>1444</b>\n"
                         "<em>—Å –º–æ–±–∏–ª—å–Ω–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞</em>: ‚òé - <b>+7(800)-080-1444</b>\n"
                         "<em>–ü–æ—á—Ç–∞</em>: ‚úâ - <b>sms@kmg.kz</b>")


@router.callback_query(F.data.startswith("profile_"))
async def checkin_lang(callback: CallbackQuery) -> None:
    """
    Update profile
    """
    await callback.answer("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è! üìî", show_alert=False)

    await callback.message.answer("–í—ã–±–∏—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è üîÅ", reply_markup=get_update_profile_kb())


@router.callback_query(F.data.startswith("update_"))
async def checkin_lang(callback: CallbackQuery, state: FSMContext, bot) -> None:
    """
    Update profile
    """
    await callback.answer("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è", show_alert=False)

    part_profile = callback.data.split("_")[1]
    if part_profile == "all":
        await checkin_confirm(callback, state, bot)
    elif part_profile == "mail":
        await state.set_state(PersonState.dataUpdate)
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∫–æ—Ä–ø–∞—Ä–∞—Ç–∏–≤–Ω—É—é –ø–æ—á—Ç—É ‚úâ:")
    elif part_profile == "fullname":
        await state.set_state(PersonState.fullname)
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –§–ò–û :")
    elif part_profile == "phone":
        await state.set_state(PersonState.phone)
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ :")
    elif part_profile == "manager":
        await state.set_state(PersonState.manager)
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–≥–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è :")


@router.message(PersonState.dataUpdate)
async def process_email(message: Message, state: FSMContext, db) -> None:
    """
    Email validation
    """
    code = random.randrange(1000, 10000)
    await state.update_data(codes=str(code))
    if not message.entities or message.entities[0].type != "email":
        await message.answer("–ù–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ—á—Ç—ã üö´")
        return
    elif message.text.rsplit("@")[1].rfind("kmg") == -1:
        await message.answer("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—É—é –ø–æ—á—Ç—É ‚úâ")
        return
    await send_code_verification(message.text, code)
    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ üîë, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –Ω–∞ –ø–æ—á—Ç—É ‚úâ <i>{message.text}</i>")
    await state.update_data(dataUpdate=message.text)
    await state.set_state(PersonState.codes)


@router.message(PersonState.codes)
async def verification_code_user(message: Message, state: FSMContext, db) -> None:
    """
    Register user
    """
    data = await state.get_data()
    if data['codes'] == message.text:
        await tool.email_update(user_id=message.from_user.id, email=data["dataUpdate"], db=db)
        await state.clear()
        logger.warning(f"User by email {data['dataUpdate']} was registered")
        await message.answer("–í–∞—à–∞ –ø–æ—á—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞! ‚úÖ", reply_markup=get_service_kb())
    else:
        logger.warning(f"User by email {data['dataUpdate']} enter incorrect verify code")
        await message.answer("–ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π üö´, —É–±–µ–¥–∏—Ç–µ—Å—å –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –∫–æ–¥–∞ –∏ –≤–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑!")


@router.message(PersonState.fullname)
async def update_fullname(message: Message, state: FSMContext, db) -> None:
    """
    Update fullname
    """
    current_state = await state.get_state()
    new_fullname = message.text
    await tool.credentials_update(message.from_user.id, new_fullname, db, current_state)
    await state.clear()
    await message.answer("–í–∞—à –§–ò–û —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω! ‚úÖ", reply_markup=get_service_kb())


@router.message(PersonState.phone)
async def update_phone(message: Message, state: FSMContext, db) -> None:
    """
    Update phone
    """
    current_state = await state.get_state()
    new_fullname = message.text
    await tool.credentials_update(message.from_user.id, new_fullname, db, current_state)
    await state.clear()
    await message.answer("–í–∞—à –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω! ‚úÖ", reply_markup=get_service_kb())


@router.message(PersonState.manager)
async def update_manager(message: Message, state: FSMContext, db) -> None:
    """
    Update manager
    """
    current_state = await state.get_state()
    new_fullname = message.text
    await tool.credentials_update(message.from_user.id, new_fullname, db, current_state)
    await state.clear()
    await message.answer("–í–∞—à –ú–µ–Ω–µ–¥–∂–µ—Ä —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω! ‚úÖ", reply_markup=get_service_kb())


@router.message(F.text.startswith("üè°"))
async def canceled_command(message: Message, db):
    await cmd_dice_in_group(message, db)
