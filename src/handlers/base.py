from aiogram.types import Message, FSInputFile, CallbackQuery
from aiogram.filters import CommandStart, Command
from aiogram import Router, F
from filters.chat_type import ChatTypeFilter
from aiogram.fsm.context import FSMContext
import tool
from .registration import checkin_confirm
from config import BASE_DIR, logger
from keyboards.register import get_reg_bt, get_service_kb, get_update_kb, get_update_profile_kb

router = Router()
router.message.filter(ChatTypeFilter(chat_type=["group", "supergroup"]))
_KMG_LOGO = FSInputFile(BASE_DIR + "/media/logo_kmg.jpg")

@router.message(CommandStart())
async def cmd_dice_in_group(message: Message, db):
    user = await tool.exist_user(str(message.from_user.id), db)

    if not user:
        logger.warning("New user to want registration")
        await message.answer_photo(_KMG_LOGO, caption="–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –°–º–∞—Ä—Ç-–±–æ—Ç üêπ'–ö–∞–∑–ú—É–Ω–∞–π–ì–∞–∑'\n"
                                                     "–¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ "
                                                     "<b>–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è</b> üîµ", reply_markup=get_reg_bt())
        return True

    await message.answer_photo(photo=_KMG_LOGO, caption=f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ üêè <u>{user[0]}</u> \n–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –°–º–∞—Ä—Ç-–±–æ—Ç '–ö–∑–∞–ú—É–Ω–∞–π–ì–∞–∑'üêπ\n"
                         f"–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n"
                         f"‚ñ´ –ü–æ—á—Ç–∞: ‚úâ - {user[1]}\n"
                         f"‚ñ´ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ‚òé - {user[2]}\n"
                         f"‚ñ´ –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å: üêº - {user[3]}", reply_markup=get_service_kb())


@router.message(Command("help"))
async def helper(message: Message):
        await message.answer(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ –í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –°–º–∞—Ä—Ç-–±–æ—Ç üêπ'–ö–∞–∑–ú—É–Ω–∞–π–ì–∞–∑'\n"
                             f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–º–∞–Ω–¥—ã: üìé\n"
                             f"‚ñ´ –ù–∞—á–∞–ª–æ /start\n"
                             f"‚ñ´ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è /register\n"
                             f"‚ñ´ –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å /service\n"
                             f"‚ñ´ –°–±—Ä–æ—Å /cancel")


@router.message(Command("cancel"))
async def canceled_command(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(f"–°–±—Ä–æ—Å")


@router.message(F.text.startswith("–ü—Ä–æ—Ñ–∏–ª—å"))
async def canceled_command(message: Message, db):
    user = await tool.exist_user(str(message.from_user.id), db)
    if not user:
        logger.warning("New user to want registration")
        await message.answer_photo(_KMG_LOGO, caption="–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –°–º–∞—Ä—Ç-–±–æ—Ç üêπ'–ö–∞–∑–ú—É–Ω–∞–π–ì–∞–∑'\n"
                                                     "–¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ "
                                                     "<b>–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è</b> üîµ", reply_markup=get_reg_bt())
        return
    await message.answer(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ üêë <u>{user[0]}</u>, \n–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å üìî\n\n"
                         f"–ü–æ—á—Ç–∞: ‚úâ - {user[1]}\n"
                         f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ‚òé - {user[2]}\n"
                         f"–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å: üêº - {user[3]}", reply_markup=get_update_kb())


@router.message(F.text.startswith("–û–±—Ä–∞—Ç–Ω–∞—è"))
async def canceled_command(message: Message):
    await message.answer("üó≥ –ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–æ–Ω–æ–≤–µ–Ω–∏ –≤–æ–ø—Ä–æ—Å–æ–≤, –ø—Ä–æ—Å–∏–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è –ø–æ –Ω–∏–∂–µ—É–∫–∞–∑–∞–Ω–Ω—ã–º –∫–æ–Ω—Ç–∞–∫—Ç–∞–º:\n"
                         "<em>T–µ–ª–µ—Ñ–æ–Ω</em>: ‚òé - <b>1414</b>\n"
                         "<em>–ü–æ—á—Ç–∞</em>: ‚úâ - <b>manager@kmg.kz</b>")


@router.callback_query(F.data.startswith("profile_"))
async def checkin_lang(callback: CallbackQuery) -> None:
    """
    Update profile
    """
    await callback.answer("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è! üìî", show_alert=False)

    await callback.message.answer("–í—ã–±–∏—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è üîÅ", reply_markup=get_update_profile_kb())


@router.callback_query(F.data.startswith("update_"))
async def checkin_lang(callback: CallbackQuery, state: FSMContext, bot) -> None:
    """
    Update profile
    """
    await callback.answer("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è", show_alert=False)
    await callback.message.answer("–í—ã–±–∏—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è üîÅ", reply_markup=get_update_profile_kb())

    lang_msg = callback.data.split("_")[1]
    if lang_msg == "all":
        await checkin_confirm(callback, state, bot)
